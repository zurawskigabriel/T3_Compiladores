# T3 Compiladores - An√°lise Sem√¢ntica

## Grupo t3-06:
- Felipe Conzatti Frison
- Lucas Schwartz dos Santos
- Gabriel Zurawski de Souza

## üìã Enunciado da Tarefa

**Tarefa 3 - An√°lise sem√¢ntica**
- Atividade individual ou em grupos de at√© 4 alunos
- Prazo: at√© o dia da prova P2, at√© as 23:59h
- Defini√ß√£o dos grupos e sala de entrega no card TDE

### Objetivo
Alterar o c√≥digo exemplo visto em aula (vers√£o com arrays) para realizar **verifica√ß√£o sem√¢ntica de structs**.

### Requisitos
1. **Reconhecer a declara√ß√£o de structs** e gerar uma tabela de s√≠mbolos. Exemplo de sa√≠da em T3/corretoStructSaida.png
2. **Verificar se o programa est√° semanticamente correto** ou identificar erros sem√¢nticos. Exemplo de sa√≠da T3/erradoStructSaida.png

## üìÅ Estrutura do Projeto

### `exemploSem_v0c/` - Vers√£o B√°sica
Implementa√ß√£o b√°sica do compilador sem suporte a arrays.

**Arquivos principais:**
- `exemploSem.flex` - Analisador l√©xico (JFlex)
- `exemploSem.y` - Gram√°tica e analisador sint√°tico (YACC)
- `TabSimb.java` - Implementa√ß√£o da tabela de s√≠mbolos
- `TS_entry.java` - Entrada da tabela de s√≠mbolos
- `ClasseID.java` - Classifica√ß√£o de identificadores

### `exemploSem_v0_array/` - Vers√£o com Arrays
Vers√£o estendida que inclui suporte para **arrays** (base para implementar structs).

**Arquivos adicionais:**
- `erroArray.txt` - Exemplo de erro com arrays
- `novo.txt` - Aparentemente um arquivo de teste perdido

### `T3/` - Arquivos da Tarefa
Implementar o T3 nesse diret√≥rio. J√° est√° nele, para ser modificado, c√≥pias de todos os arquivos que est√£o no diret√≥rio exemploSem_v0_array/.

- `corretoStruct.txt` - Exemplo de programa correto com structs
- `erroStruct.txt` - Exemplo de programa com erros sem√¢nticos em structs

## üîß Como Compilar

### Pr√©-requisitos
- Java instalado
- JFlex.jar (inclu√≠do)
- yacc.exe ou yacc.linux (inclu√≠dos)

### Para `exemploSem_v0c/`:
```bash
cd exemploSem_v0c
make
```

### Para `exemploSem_v0_array/`:
```bash
cd exemploSem_v0_array
make
```

### Poss√≠veis problemas:
Se encontrar erro com `byaccj`, edite o Makefile:
```makefile
BYACCJ = ./yacc.linux -tv -J  # Para Linux/WSL
# ou
BYACCJ = ./yacc.exe -tv -J    # Para Windows
```

## üöÄ Como Executar

Dentro de qualquer um dos diret√≥rios:

### Compilar e executar:
```bash
make run
```

### Apenas compilar:
```bash
make build
```

### Limpar arquivos gerados:
```bash
make clean
```

### Testar com arquivos de exemplo:
```bash
java Parser < correto.txt
java Parser < erro1.txt
java Parser < erro2.txt
```

## üîÑ Pipeline de Compila√ß√£o

### Depend√™ncias e Fluxo:

```
exemploSem.flex ‚Üí [JFlex] ‚Üí Yylex.java
exemploSem.y ‚Üí [YACC] ‚Üí Parser.java
```

### Processo completo:

1. **exemploSem.flex**
   - Especifica√ß√£o do analisador l√©xico
   - **Processado por:** JFlex.jar
   - **Gera:** Yylex.java (analisador l√©xico)

2. **exemploSem.y**
   - Gram√°tica e regras sem√¢nticas
   - **Processado por:** yacc.exe/yacc.linux
   - **Gera:** Parser.java (analisador sint√°tico/sem√¢ntico)

3. **Compila√ß√£o Java:**
   ```
   TS_entry.java + TabSimb.java + Yylex.java + Parser.java
   ‚Üì [javac]
   Parser.class (execut√°vel final)
   ```

### Responsabilidades dos componentes:

- **Yylex.java**: An√°lise l√©xica (tokens)
- **Parser.java**: An√°lise sint√°tica e sem√¢ntica
- **TabSimb.java**: Gerenciamento da tabela de s√≠mbolos
- **TS_entry.java**: Representa√ß√£o de entradas na tabela de s√≠mbolos
- **ClasseID.java**: Classifica√ß√£o de identificadores (vari√°veis, tipos, etc.)

## üìù Exemplos de Teste

### Programa correto (`corretoStruct.txt`):
```c
struct DATA {
   int dia;
   int mes;
   int ano;
};

DATA d1;
d1.dia = 4;
d1.mes = 12;
```

### Programa com erro (`erroStruct.txt`):
```c
struct DATA {
   int dia;
   int mes;
};

DATA d1;
d1.dnasc = d1.dia;        // ERRO: campo 'dnasc' n√£o existe
i.dia = 26;               // ERRO: 'i' n√£o √© struct
```

## üéØ Para Implementar (T3)

1. Estender a gram√°tica para reconhecer declara√ß√µes de struct
2. Modificar a tabela de s√≠mbolos para armazenar informa√ß√µes de struct
3. Implementar verifica√ß√µes sem√¢nticas:
   - Campos de struct existem
   - Tipos s√£o compat√≠veis
   - Acesso a campos apenas em vari√°veis struct