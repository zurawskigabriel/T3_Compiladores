   0  $accept : prog $end

   1  $$1 :

   2  prog : $$1 globalDeclList main

   3  globalDeclList : globalDecl globalDeclList
   4                 |

   5  globalDecl : decl
   6             | declStruct

   7  declStructList : declStruct declStructList
   8                 |

   9  $$2 :

  10  declStruct : STRUCT IDENT $$2 '{' dList '}' ';'

  11  dList : decl dList
  12        |

  13  $$3 :

  14  decl : type $$3 TArray Lid ';'

  15  Lid : Lid ',' id
  16      | id

  17  id : IDENT

  18  TArray : '[' NUM ']' TArray
  19         |

  20  type : INT
  21       | DOUBLE
  22       | BOOL

  23  main : VOID MAIN '(' ')' bloco

  24  bloco : '{' listacmd '}'

  25  listacmd : listacmd cmd
  26           |

  27  cmd : exp ';'
  28      | IF '(' exp ')' cmd

  29  exp : exp '+' exp
  30      | exp '>' exp
  31      | exp AND exp
  32      | NUM
  33      | '(' exp ')'
  34      | IDENT
  35      | exp '=' exp
  36      | exp '[' exp ']'

state 0
	$accept : . prog $end  (0)
	$$1 : .  (1)

	.  reduce 1

	prog  goto 1
	$$1  goto 2


state 1
	$accept : prog . $end  (0)

	$end  accept


state 2
	prog : $$1 . globalDeclList main  (2)
	globalDeclList : .  (4)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	STRUCT  shift 6
	VOID  reduce 4

	type  goto 7
	globalDeclList  goto 8
	globalDecl  goto 9
	decl  goto 10
	declStruct  goto 11


state 3
	type : INT .  (20)

	.  reduce 20


state 4
	type : DOUBLE .  (21)

	.  reduce 21


state 5
	type : BOOL .  (22)

	.  reduce 22


state 6
	declStruct : STRUCT . IDENT $$2 '{' dList '}' ';'  (10)

	IDENT  shift 12
	.  error


state 7
	decl : type . $$3 TArray Lid ';'  (14)
	$$3 : .  (13)

	.  reduce 13

	$$3  goto 13


state 8
	prog : $$1 globalDeclList . main  (2)

	VOID  shift 14
	.  error

	main  goto 15


state 9
	globalDeclList : globalDecl . globalDeclList  (3)
	globalDeclList : .  (4)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	STRUCT  shift 6
	VOID  reduce 4

	type  goto 7
	globalDeclList  goto 16
	globalDecl  goto 9
	decl  goto 10
	declStruct  goto 11


state 10
	globalDecl : decl .  (5)

	.  reduce 5


state 11
	globalDecl : declStruct .  (6)

	.  reduce 6


state 12
	declStruct : STRUCT IDENT . $$2 '{' dList '}' ';'  (10)
	$$2 : .  (9)

	.  reduce 9

	$$2  goto 17


state 13
	decl : type $$3 . TArray Lid ';'  (14)
	TArray : .  (19)

	'['  shift 18
	IDENT  reduce 19

	TArray  goto 19


state 14
	main : VOID . MAIN '(' ')' bloco  (23)

	MAIN  shift 20
	.  error


state 15
	prog : $$1 globalDeclList main .  (2)

	.  reduce 2


state 16
	globalDeclList : globalDecl globalDeclList .  (3)

	.  reduce 3


state 17
	declStruct : STRUCT IDENT $$2 . '{' dList '}' ';'  (10)

	'{'  shift 21
	.  error


state 18
	TArray : '[' . NUM ']' TArray  (18)

	NUM  shift 22
	.  error


state 19
	decl : type $$3 TArray . Lid ';'  (14)

	IDENT  shift 23
	.  error

	Lid  goto 24
	id  goto 25


state 20
	main : VOID MAIN . '(' ')' bloco  (23)

	'('  shift 26
	.  error


state 21
	declStruct : STRUCT IDENT $$2 '{' . dList '}' ';'  (10)
	dList : .  (12)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	'}'  reduce 12

	type  goto 7
	decl  goto 27
	dList  goto 28


state 22
	TArray : '[' NUM . ']' TArray  (18)

	']'  shift 29
	.  error


state 23
	id : IDENT .  (17)

	.  reduce 17


state 24
	decl : type $$3 TArray Lid . ';'  (14)
	Lid : Lid . ',' id  (15)

	';'  shift 30
	','  shift 31
	.  error


state 25
	Lid : id .  (16)

	.  reduce 16


state 26
	main : VOID MAIN '(' . ')' bloco  (23)

	')'  shift 32
	.  error


state 27
	dList : decl . dList  (11)
	dList : .  (12)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	'}'  reduce 12

	type  goto 7
	decl  goto 27
	dList  goto 33


state 28
	declStruct : STRUCT IDENT $$2 '{' dList . '}' ';'  (10)

	'}'  shift 34
	.  error


state 29
	TArray : '[' NUM ']' . TArray  (18)
	TArray : .  (19)

	'['  shift 18
	IDENT  reduce 19

	TArray  goto 35


state 30
	decl : type $$3 TArray Lid ';' .  (14)

	.  reduce 14


state 31
	Lid : Lid ',' . id  (15)

	IDENT  shift 23
	.  error

	id  goto 36


state 32
	main : VOID MAIN '(' ')' . bloco  (23)

	'{'  shift 37
	.  error

	bloco  goto 38


state 33
	dList : decl dList .  (11)

	.  reduce 11


state 34
	declStruct : STRUCT IDENT $$2 '{' dList '}' . ';'  (10)

	';'  shift 39
	.  error


state 35
	TArray : '[' NUM ']' TArray .  (18)

	.  reduce 18


state 36
	Lid : Lid ',' id .  (15)

	.  reduce 15


state 37
	bloco : '{' . listacmd '}'  (24)
	listacmd : .  (26)

	.  reduce 26

	listacmd  goto 40


state 38
	main : VOID MAIN '(' ')' bloco .  (23)

	.  reduce 23


state 39
	declStruct : STRUCT IDENT $$2 '{' dList '}' ';' .  (10)

	.  reduce 10


state 40
	bloco : '{' listacmd . '}'  (24)
	listacmd : listacmd . cmd  (25)

	IDENT  shift 41
	NUM  shift 42
	IF  shift 43
	'}'  shift 44
	'('  shift 45
	.  error

	exp  goto 46
	cmd  goto 47


state 41
	exp : IDENT .  (34)

	.  reduce 34


state 42
	exp : NUM .  (32)

	.  reduce 32


state 43
	cmd : IF . '(' exp ')' cmd  (28)

	'('  shift 48
	.  error


state 44
	bloco : '{' listacmd '}' .  (24)

	.  reduce 24


state 45
	exp : '(' . exp ')'  (33)

	IDENT  shift 41
	NUM  shift 42
	'('  shift 45
	.  error

	exp  goto 49


state 46
	cmd : exp . ';'  (27)
	exp : exp . '+' exp  (29)
	exp : exp . '>' exp  (30)
	exp : exp . AND exp  (31)
	exp : exp . '=' exp  (35)
	exp : exp . '[' exp ']'  (36)

	AND  shift 50
	'='  shift 51
	'>'  shift 52
	'+'  shift 53
	'['  shift 54
	';'  shift 55
	.  error


state 47
	listacmd : listacmd cmd .  (25)

	.  reduce 25


state 48
	cmd : IF '(' . exp ')' cmd  (28)

	IDENT  shift 41
	NUM  shift 42
	'('  shift 45
	.  error

	exp  goto 56


state 49
	exp : exp . '+' exp  (29)
	exp : exp . '>' exp  (30)
	exp : exp . AND exp  (31)
	exp : '(' exp . ')'  (33)
	exp : exp . '=' exp  (35)
	exp : exp . '[' exp ']'  (36)

	AND  shift 50
	'='  shift 51
	'>'  shift 52
	'+'  shift 53
	'['  shift 54
	')'  shift 57
	.  error


state 50
	exp : exp AND . exp  (31)

	IDENT  shift 41
	NUM  shift 42
	'('  shift 45
	.  error

	exp  goto 58


state 51
	exp : exp '=' . exp  (35)

	IDENT  shift 41
	NUM  shift 42
	'('  shift 45
	.  error

	exp  goto 59


state 52
	exp : exp '>' . exp  (30)

	IDENT  shift 41
	NUM  shift 42
	'('  shift 45
	.  error

	exp  goto 60


state 53
	exp : exp '+' . exp  (29)

	IDENT  shift 41
	NUM  shift 42
	'('  shift 45
	.  error

	exp  goto 61


state 54
	exp : exp '[' . exp ']'  (36)

	IDENT  shift 41
	NUM  shift 42
	'('  shift 45
	.  error

	exp  goto 62


state 55
	cmd : exp ';' .  (27)

	.  reduce 27


state 56
	cmd : IF '(' exp . ')' cmd  (28)
	exp : exp . '+' exp  (29)
	exp : exp . '>' exp  (30)
	exp : exp . AND exp  (31)
	exp : exp . '=' exp  (35)
	exp : exp . '[' exp ']'  (36)

	AND  shift 50
	'='  shift 51
	'>'  shift 52
	'+'  shift 53
	'['  shift 54
	')'  shift 63
	.  error


state 57
	exp : '(' exp ')' .  (33)

	.  reduce 33


state 58
	exp : exp . '+' exp  (29)
	exp : exp . '>' exp  (30)
	exp : exp . AND exp  (31)
	exp : exp AND exp .  (31)
	exp : exp . '=' exp  (35)
	exp : exp . '[' exp ']'  (36)

	'['  shift 54
	AND  reduce 31
	'='  reduce 31
	'>'  reduce 31
	'+'  reduce 31
	';'  reduce 31
	']'  reduce 31
	')'  reduce 31


state 59
	exp : exp . '+' exp  (29)
	exp : exp . '>' exp  (30)
	exp : exp . AND exp  (31)
	exp : exp . '=' exp  (35)
	exp : exp '=' exp .  (35)
	exp : exp . '[' exp ']'  (36)

	AND  shift 50
	'='  shift 51
	'>'  shift 52
	'+'  shift 53
	'['  shift 54
	';'  reduce 35
	']'  reduce 35
	')'  reduce 35


state 60
	exp : exp . '+' exp  (29)
	exp : exp . '>' exp  (30)
	exp : exp '>' exp .  (30)
	exp : exp . AND exp  (31)
	exp : exp . '=' exp  (35)
	exp : exp . '[' exp ']'  (36)

	AND  shift 50
	'+'  shift 53
	'['  shift 54
	'='  reduce 30
	';'  reduce 30
	']'  reduce 30
	')'  reduce 30


state 61
	exp : exp . '+' exp  (29)
	exp : exp '+' exp .  (29)
	exp : exp . '>' exp  (30)
	exp : exp . AND exp  (31)
	exp : exp . '=' exp  (35)
	exp : exp . '[' exp ']'  (36)

	AND  shift 50
	'['  shift 54
	'='  reduce 29
	'>'  reduce 29
	'+'  reduce 29
	';'  reduce 29
	']'  reduce 29
	')'  reduce 29


state 62
	exp : exp . '+' exp  (29)
	exp : exp . '>' exp  (30)
	exp : exp . AND exp  (31)
	exp : exp . '=' exp  (35)
	exp : exp . '[' exp ']'  (36)
	exp : exp '[' exp . ']'  (36)

	AND  shift 50
	'='  shift 51
	'>'  shift 52
	'+'  shift 53
	'['  shift 54
	']'  shift 64
	.  error


state 63
	cmd : IF '(' exp ')' . cmd  (28)

	IDENT  shift 41
	NUM  shift 42
	IF  shift 43
	'('  shift 45
	.  error

	exp  goto 46
	cmd  goto 65


state 64
	exp : exp '[' exp ']' .  (36)

	.  reduce 36


state 65
	cmd : IF '(' exp ')' cmd .  (28)

	.  reduce 28


Rules never reduced:
	declStructList : declStruct declStructList  (7)
	declStructList :  (8)


25 terminals, 20 nonterminals
37 grammar rules, 66 states
